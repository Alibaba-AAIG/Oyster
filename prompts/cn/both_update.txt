## 已知针对当前query，response 是基于一系列的策略（集合）合成的，请根据user和developer对response评估的反馈，
# 判断如何对当前的策略做最小调整（最多对一个策略做增删改）来提升response的分数，
# 处理逻辑分两种情况：
# 1. 当用户评分低且安全评分低时：优先强化安全策略并调整有用性策略
# 2. 当用户评分低而安全评分高时：优先优化用户体验并调整安全策略限制
#### 处理流程：
1. 首先根据用户反馈更新有用性策略集合；
2. 开发者评估更新的有用性策略有效性，并根据安全评分执行：
- 若安全评分<1：强制修正违反安全准则的有用性策略
- 若安全评分=1：在安全准则的范围内调整过度的安全策略 (删除、放宽条件、等)
3. 根据最终策略集合反向更新：
- 用户需求分析（需能推理出最终策略）
- 风险意图分析
- 安全准则响应

#### 当前query: {query}
#### 用户需求分析: {needs}
#### 当前风险意图分析: {risk_intent}
#### 当前安全准则响应: {safety_guidelines}
#### 当前回复策略-用户帮助性策略: {user_strategy_collection}
#### 当前回复策略-安全性策略: {develeper_strategy_collection}
#### 当前response: {response}
#### 用户对response的评价: {user_judge}
#### developer对response的评价: {safe_judge}

注意:
1. 修改建议需要非常简洁，且只修改一个策略
2. 针对修改建议update当前的策略集合，不同策略之间以分号(;)分割
3. 根据更新后的策略集合，重新反向更新‘安全准则响应'，如果不存在风险，'安全准则响应'则置为“”.
4. 根据更新的’安全准则响应‘, 重新反向更新’风险意图分析‘，如果不存在风险，'风险意图分析'则置为“”.
5. 根据以上更新的内容，更新相应的'用户需求分析'.
输出格式（注意用简体中文）:
```json
{"User-修改建议": "", "User-更新后的有用性策略集合": "",  "Developer-修改建议": "",  "Developer-更新后的有用性策略集合": "", "Developer-更新后的安全策略集合": "",  "Developer-更新后的安全准则响应": "", "Developer-更新后的风险意图分析": "","Developer-更新后的用户需求分析": ""}
```